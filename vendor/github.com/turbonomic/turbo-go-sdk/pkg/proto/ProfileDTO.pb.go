// Code generated by protoc-gen-go. DO NOT EDIT.
// source: ProfileDTO.proto

package proto

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type EntityProfileDTO_VMProfileDTO_VMTier int32

const (
	// Basic VM tier: VMs can't participate in Azure Load Balancers
	EntityProfileDTO_VMProfileDTO_BASIC EntityProfileDTO_VMProfileDTO_VMTier = 1
	// Standard VM tier: VMs can be part of Azure Load Balancers backend pools
	EntityProfileDTO_VMProfileDTO_STANDARD EntityProfileDTO_VMProfileDTO_VMTier = 2
)

var EntityProfileDTO_VMProfileDTO_VMTier_name = map[int32]string{
	1: "BASIC",
	2: "STANDARD",
}

var EntityProfileDTO_VMProfileDTO_VMTier_value = map[string]int32{
	"BASIC":    1,
	"STANDARD": 2,
}

func (x EntityProfileDTO_VMProfileDTO_VMTier) Enum() *EntityProfileDTO_VMProfileDTO_VMTier {
	p := new(EntityProfileDTO_VMProfileDTO_VMTier)
	*p = x
	return p
}

func (x EntityProfileDTO_VMProfileDTO_VMTier) String() string {
	return proto.EnumName(EntityProfileDTO_VMProfileDTO_VMTier_name, int32(x))
}

func (x *EntityProfileDTO_VMProfileDTO_VMTier) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(EntityProfileDTO_VMProfileDTO_VMTier_value, data, "EntityProfileDTO_VMProfileDTO_VMTier")
	if err != nil {
		return err
	}
	*x = EntityProfileDTO_VMProfileDTO_VMTier(value)
	return nil
}

func (EntityProfileDTO_VMProfileDTO_VMTier) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_9c3ac0a62ca7565a, []int{0, 1, 0}
}

type EntityProfileDTO_VMProfileDTO_InstanceDiskType int32

const (
	EntityProfileDTO_VMProfileDTO_NONE EntityProfileDTO_VMProfileDTO_InstanceDiskType = 1
	// AWS HDD
	EntityProfileDTO_VMProfileDTO_HDD EntityProfileDTO_VMProfileDTO_InstanceDiskType = 2
	// AWS SSD
	EntityProfileDTO_VMProfileDTO_SSD EntityProfileDTO_VMProfileDTO_InstanceDiskType = 3
	// AWS  non-volatile memory express
	EntityProfileDTO_VMProfileDTO_NVME_SSD EntityProfileDTO_VMProfileDTO_InstanceDiskType = 4
	// Azure standard storage
	EntityProfileDTO_VMProfileDTO_AZURE_HDD EntityProfileDTO_VMProfileDTO_InstanceDiskType = 10
	// Azure premium storage
	EntityProfileDTO_VMProfileDTO_AZURE_SSD EntityProfileDTO_VMProfileDTO_InstanceDiskType = 11
)

var EntityProfileDTO_VMProfileDTO_InstanceDiskType_name = map[int32]string{
	1:  "NONE",
	2:  "HDD",
	3:  "SSD",
	4:  "NVME_SSD",
	10: "AZURE_HDD",
	11: "AZURE_SSD",
}

var EntityProfileDTO_VMProfileDTO_InstanceDiskType_value = map[string]int32{
	"NONE":      1,
	"HDD":       2,
	"SSD":       3,
	"NVME_SSD":  4,
	"AZURE_HDD": 10,
	"AZURE_SSD": 11,
}

func (x EntityProfileDTO_VMProfileDTO_InstanceDiskType) Enum() *EntityProfileDTO_VMProfileDTO_InstanceDiskType {
	p := new(EntityProfileDTO_VMProfileDTO_InstanceDiskType)
	*p = x
	return p
}

func (x EntityProfileDTO_VMProfileDTO_InstanceDiskType) String() string {
	return proto.EnumName(EntityProfileDTO_VMProfileDTO_InstanceDiskType_name, int32(x))
}

func (x *EntityProfileDTO_VMProfileDTO_InstanceDiskType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(EntityProfileDTO_VMProfileDTO_InstanceDiskType_value, data, "EntityProfileDTO_VMProfileDTO_InstanceDiskType")
	if err != nil {
		return err
	}
	*x = EntityProfileDTO_VMProfileDTO_InstanceDiskType(value)
	return nil
}

func (EntityProfileDTO_VMProfileDTO_InstanceDiskType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_9c3ac0a62ca7565a, []int{0, 1, 1}
}

// This file lists all the objects related to Service Entity profiles
// created by user in environment or in VMTurbo
type EntityProfileDTO struct {
	// id of the entity profile.  This should allow access to the object
	// in the system it was discovered from and it should be unique in VMT also.
	Id *string `protobuf:"bytes,1,req,name=id" json:"id,omitempty"`
	// display name to be displayed to the user
	DisplayName *string `protobuf:"bytes,2,opt,name=displayName" json:"displayName,omitempty"`
	// Type of entity this profile applies to
	EntityType *EntityDTO_EntityType `protobuf:"varint,3,req,name=entityType,enum=common_dto.EntityDTO_EntityType" json:"entityType,omitempty"`
	// The profile should contain multiple related commodity profiles for example
	// profile for MEM, CPU, VSTORAGE...
	CommodityProfile []*CommodityProfileDTO `protobuf:"bytes,4,rep,name=commodityProfile" json:"commodityProfile,omitempty"`
	// Model related to the profile
	Model *string `protobuf:"bytes,5,opt,name=model" json:"model,omitempty"`
	// Vendor related to the profile
	Vendor *string `protobuf:"bytes,6,opt,name=vendor" json:"vendor,omitempty"`
	// Description of the profile
	Description *string `protobuf:"bytes,7,opt,name=description" json:"description,omitempty"`
	// If this is a profile for VMs, vmProfileDTO must be specified
	// If this is a profile for PMs, pmProfileDTO must be specified
	// If this is a profile for DBs or DBInstances, dbProfileDTO must be specified
	//
	// Types that are valid to be assigned to EntityTypeSpecificData:
	//	*EntityProfileDTO_VmProfileDTO
	//	*EntityProfileDTO_PmProfileDTO
	//	*EntityProfileDTO_DbProfileDTO
	EntityTypeSpecificData isEntityProfileDTO_EntityTypeSpecificData `protobuf_oneof:"EntityTypeSpecificData"`
	// This flag indicates where existing entities can be matched against this profile
	EnableProvisionMatch *bool `protobuf:"varint,10,opt,name=enableProvisionMatch" json:"enableProvisionMatch,omitempty"`
	// This flag indicates whether a resize action may use this profile to resize to
	EnableResizeMatch *bool `protobuf:"varint,11,opt,name=enableResizeMatch" json:"enableResizeMatch,omitempty"`
	// Allow entity properties to be specified related to the entity profile dto.
	// Entity properties are a list of <string, string, string> namespace, key, value triplets
	EntityProperties []*EntityDTO_EntityProperty `protobuf:"bytes,12,rep,name=entityProperties" json:"entityProperties,omitempty"`
	// Whether the profile is being created/updated or removed
	UpdateType           *UpdateType `protobuf:"varint,14,opt,name=updateType,enum=common_dto.UpdateType,def=0" json:"updateType,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *EntityProfileDTO) Reset()         { *m = EntityProfileDTO{} }
func (m *EntityProfileDTO) String() string { return proto.CompactTextString(m) }
func (*EntityProfileDTO) ProtoMessage()    {}
func (*EntityProfileDTO) Descriptor() ([]byte, []int) {
	return fileDescriptor_9c3ac0a62ca7565a, []int{0}
}

func (m *EntityProfileDTO) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EntityProfileDTO.Unmarshal(m, b)
}
func (m *EntityProfileDTO) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EntityProfileDTO.Marshal(b, m, deterministic)
}
func (m *EntityProfileDTO) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EntityProfileDTO.Merge(m, src)
}
func (m *EntityProfileDTO) XXX_Size() int {
	return xxx_messageInfo_EntityProfileDTO.Size(m)
}
func (m *EntityProfileDTO) XXX_DiscardUnknown() {
	xxx_messageInfo_EntityProfileDTO.DiscardUnknown(m)
}

var xxx_messageInfo_EntityProfileDTO proto.InternalMessageInfo

const Default_EntityProfileDTO_UpdateType UpdateType = UpdateType_UPDATED

func (m *EntityProfileDTO) GetId() string {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return ""
}

func (m *EntityProfileDTO) GetDisplayName() string {
	if m != nil && m.DisplayName != nil {
		return *m.DisplayName
	}
	return ""
}

func (m *EntityProfileDTO) GetEntityType() EntityDTO_EntityType {
	if m != nil && m.EntityType != nil {
		return *m.EntityType
	}
	return EntityDTO_SWITCH
}

func (m *EntityProfileDTO) GetCommodityProfile() []*CommodityProfileDTO {
	if m != nil {
		return m.CommodityProfile
	}
	return nil
}

func (m *EntityProfileDTO) GetModel() string {
	if m != nil && m.Model != nil {
		return *m.Model
	}
	return ""
}

func (m *EntityProfileDTO) GetVendor() string {
	if m != nil && m.Vendor != nil {
		return *m.Vendor
	}
	return ""
}

func (m *EntityProfileDTO) GetDescription() string {
	if m != nil && m.Description != nil {
		return *m.Description
	}
	return ""
}

type isEntityProfileDTO_EntityTypeSpecificData interface {
	isEntityProfileDTO_EntityTypeSpecificData()
}

type EntityProfileDTO_VmProfileDTO struct {
	VmProfileDTO *EntityProfileDTO_VMProfileDTO `protobuf:"bytes,8,opt,name=vmProfileDTO,oneof"`
}

type EntityProfileDTO_PmProfileDTO struct {
	PmProfileDTO *EntityProfileDTO_PMProfileDTO `protobuf:"bytes,9,opt,name=pmProfileDTO,oneof"`
}

type EntityProfileDTO_DbProfileDTO struct {
	DbProfileDTO *EntityProfileDTO_DBProfileDTO `protobuf:"bytes,13,opt,name=dbProfileDTO,oneof"`
}

func (*EntityProfileDTO_VmProfileDTO) isEntityProfileDTO_EntityTypeSpecificData() {}

func (*EntityProfileDTO_PmProfileDTO) isEntityProfileDTO_EntityTypeSpecificData() {}

func (*EntityProfileDTO_DbProfileDTO) isEntityProfileDTO_EntityTypeSpecificData() {}

func (m *EntityProfileDTO) GetEntityTypeSpecificData() isEntityProfileDTO_EntityTypeSpecificData {
	if m != nil {
		return m.EntityTypeSpecificData
	}
	return nil
}

func (m *EntityProfileDTO) GetVmProfileDTO() *EntityProfileDTO_VMProfileDTO {
	if x, ok := m.GetEntityTypeSpecificData().(*EntityProfileDTO_VmProfileDTO); ok {
		return x.VmProfileDTO
	}
	return nil
}

func (m *EntityProfileDTO) GetPmProfileDTO() *EntityProfileDTO_PMProfileDTO {
	if x, ok := m.GetEntityTypeSpecificData().(*EntityProfileDTO_PmProfileDTO); ok {
		return x.PmProfileDTO
	}
	return nil
}

func (m *EntityProfileDTO) GetDbProfileDTO() *EntityProfileDTO_DBProfileDTO {
	if x, ok := m.GetEntityTypeSpecificData().(*EntityProfileDTO_DbProfileDTO); ok {
		return x.DbProfileDTO
	}
	return nil
}

func (m *EntityProfileDTO) GetEnableProvisionMatch() bool {
	if m != nil && m.EnableProvisionMatch != nil {
		return *m.EnableProvisionMatch
	}
	return false
}

func (m *EntityProfileDTO) GetEnableResizeMatch() bool {
	if m != nil && m.EnableResizeMatch != nil {
		return *m.EnableResizeMatch
	}
	return false
}

func (m *EntityProfileDTO) GetEntityProperties() []*EntityDTO_EntityProperty {
	if m != nil {
		return m.EntityProperties
	}
	return nil
}

func (m *EntityProfileDTO) GetUpdateType() UpdateType {
	if m != nil && m.UpdateType != nil {
		return *m.UpdateType
	}
	return Default_EntityProfileDTO_UpdateType
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*EntityProfileDTO) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*EntityProfileDTO_VmProfileDTO)(nil),
		(*EntityProfileDTO_PmProfileDTO)(nil),
		(*EntityProfileDTO_DbProfileDTO)(nil),
	}
}

// define a multimap between region name and available license name in each region.
type EntityProfileDTO_LicenseMapEntry struct {
	Region               *string  `protobuf:"bytes,1,req,name=region" json:"region,omitempty"`
	LicenseName          []string `protobuf:"bytes,2,rep,name=licenseName" json:"licenseName,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EntityProfileDTO_LicenseMapEntry) Reset()         { *m = EntityProfileDTO_LicenseMapEntry{} }
func (m *EntityProfileDTO_LicenseMapEntry) String() string { return proto.CompactTextString(m) }
func (*EntityProfileDTO_LicenseMapEntry) ProtoMessage()    {}
func (*EntityProfileDTO_LicenseMapEntry) Descriptor() ([]byte, []int) {
	return fileDescriptor_9c3ac0a62ca7565a, []int{0, 0}
}

func (m *EntityProfileDTO_LicenseMapEntry) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EntityProfileDTO_LicenseMapEntry.Unmarshal(m, b)
}
func (m *EntityProfileDTO_LicenseMapEntry) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EntityProfileDTO_LicenseMapEntry.Marshal(b, m, deterministic)
}
func (m *EntityProfileDTO_LicenseMapEntry) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EntityProfileDTO_LicenseMapEntry.Merge(m, src)
}
func (m *EntityProfileDTO_LicenseMapEntry) XXX_Size() int {
	return xxx_messageInfo_EntityProfileDTO_LicenseMapEntry.Size(m)
}
func (m *EntityProfileDTO_LicenseMapEntry) XXX_DiscardUnknown() {
	xxx_messageInfo_EntityProfileDTO_LicenseMapEntry.DiscardUnknown(m)
}

var xxx_messageInfo_EntityProfileDTO_LicenseMapEntry proto.InternalMessageInfo

func (m *EntityProfileDTO_LicenseMapEntry) GetRegion() string {
	if m != nil && m.Region != nil {
		return *m.Region
	}
	return ""
}

func (m *EntityProfileDTO_LicenseMapEntry) GetLicenseName() []string {
	if m != nil {
		return m.LicenseName
	}
	return nil
}

// Specific data related to a vm profile
type EntityProfileDTO_VMProfileDTO struct {
	// At least one of numVCPUs and vCPUSpeed should be specified.
	// One of the two can be derived from the other using the capacity
	// from the commodityDTO
	// number of VCPUs
	NumVCPUs *int32 `protobuf:"varint,1,opt,name=numVCPUs" json:"numVCPUs,omitempty"`
	// VCPU speed
	VCPUSpeed *float32 `protobuf:"fixed32,2,opt,name=vCPUSpeed" json:"vCPUSpeed,omitempty"`
	// Number of storage entities that this VM will use storage from
	NumStorageConsumed *int32 `protobuf:"varint,3,opt,name=numStorageConsumed" json:"numStorageConsumed,omitempty"`
	// Disk type related to the VM
	DiskType *string `protobuf:"bytes,4,opt,name=diskType" json:"diskType,omitempty"`
	// An identifier for matching profiles that belong to the same family.
	Family *string `protobuf:"bytes,5,opt,name=family" json:"family,omitempty"`
	// A quantitative way to compare different instance types in a family.
	NumberOfCoupons *int32 `protobuf:"varint,6,opt,name=numberOfCoupons" json:"numberOfCoupons,omitempty"`
	// Specifies the dedicated storage configuration state for the VM profile
	DedicatedStorageNetworkState *EntityDTO_ComputeTierData_DedicatedStorageNetworkState `protobuf:"varint,7,opt,name=dedicatedStorageNetworkState,enum=common_dto.EntityDTO_ComputeTierData_DedicatedStorageNetworkState" json:"dedicatedStorageNetworkState,omitempty"`
	License                      []*EntityProfileDTO_LicenseMapEntry                     `protobuf:"bytes,8,rep,name=license" json:"license,omitempty"`
	// UUID of the entity from which this entity is cloned.
	// Required for EBS enabled profiles on AWS.
	ClonedUuid *string `protobuf:"bytes,9,opt,name=clonedUuid" json:"clonedUuid,omitempty"`
	// The VM tier. Currently required for Azure.
	VmTier           *EntityProfileDTO_VMProfileDTO_VMTier           `protobuf:"varint,10,opt,name=vmTier,enum=common_dto.EntityProfileDTO_VMProfileDTO_VMTier" json:"vmTier,omitempty"`
	InstanceDiskType *EntityProfileDTO_VMProfileDTO_InstanceDiskType `protobuf:"varint,11,opt,name=instanceDiskType,enum=common_dto.EntityProfileDTO_VMProfileDTO_InstanceDiskType" json:"instanceDiskType,omitempty"`
	InstanceDiskSize *int32                                          `protobuf:"varint,12,opt,name=instanceDiskSize" json:"instanceDiskSize,omitempty"`
	// Show if it supports AWS encrypted volumes
	SupportEncryptedVolume *bool `protobuf:"varint,13,opt,name=supportEncryptedVolume" json:"supportEncryptedVolume,omitempty"`
	// Template providers are created on the platform side, so on the probe side we can only
	// find out a key for template family commodity and then use it for creating of commodity.
	TemplateFamilyCommodityKey *string  `protobuf:"bytes,14,opt,name=templateFamilyCommodityKey" json:"templateFamilyCommodityKey,omitempty"`
	NumCloudComputeUnit        *int32   `protobuf:"varint,15,opt,name=numCloudComputeUnit" json:"numCloudComputeUnit,omitempty"`
	XXX_NoUnkeyedLiteral       struct{} `json:"-"`
	XXX_unrecognized           []byte   `json:"-"`
	XXX_sizecache              int32    `json:"-"`
}

func (m *EntityProfileDTO_VMProfileDTO) Reset()         { *m = EntityProfileDTO_VMProfileDTO{} }
func (m *EntityProfileDTO_VMProfileDTO) String() string { return proto.CompactTextString(m) }
func (*EntityProfileDTO_VMProfileDTO) ProtoMessage()    {}
func (*EntityProfileDTO_VMProfileDTO) Descriptor() ([]byte, []int) {
	return fileDescriptor_9c3ac0a62ca7565a, []int{0, 1}
}

func (m *EntityProfileDTO_VMProfileDTO) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EntityProfileDTO_VMProfileDTO.Unmarshal(m, b)
}
func (m *EntityProfileDTO_VMProfileDTO) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EntityProfileDTO_VMProfileDTO.Marshal(b, m, deterministic)
}
func (m *EntityProfileDTO_VMProfileDTO) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EntityProfileDTO_VMProfileDTO.Merge(m, src)
}
func (m *EntityProfileDTO_VMProfileDTO) XXX_Size() int {
	return xxx_messageInfo_EntityProfileDTO_VMProfileDTO.Size(m)
}
func (m *EntityProfileDTO_VMProfileDTO) XXX_DiscardUnknown() {
	xxx_messageInfo_EntityProfileDTO_VMProfileDTO.DiscardUnknown(m)
}

var xxx_messageInfo_EntityProfileDTO_VMProfileDTO proto.InternalMessageInfo

func (m *EntityProfileDTO_VMProfileDTO) GetNumVCPUs() int32 {
	if m != nil && m.NumVCPUs != nil {
		return *m.NumVCPUs
	}
	return 0
}

func (m *EntityProfileDTO_VMProfileDTO) GetVCPUSpeed() float32 {
	if m != nil && m.VCPUSpeed != nil {
		return *m.VCPUSpeed
	}
	return 0
}

func (m *EntityProfileDTO_VMProfileDTO) GetNumStorageConsumed() int32 {
	if m != nil && m.NumStorageConsumed != nil {
		return *m.NumStorageConsumed
	}
	return 0
}

func (m *EntityProfileDTO_VMProfileDTO) GetDiskType() string {
	if m != nil && m.DiskType != nil {
		return *m.DiskType
	}
	return ""
}

func (m *EntityProfileDTO_VMProfileDTO) GetFamily() string {
	if m != nil && m.Family != nil {
		return *m.Family
	}
	return ""
}

func (m *EntityProfileDTO_VMProfileDTO) GetNumberOfCoupons() int32 {
	if m != nil && m.NumberOfCoupons != nil {
		return *m.NumberOfCoupons
	}
	return 0
}

func (m *EntityProfileDTO_VMProfileDTO) GetDedicatedStorageNetworkState() EntityDTO_ComputeTierData_DedicatedStorageNetworkState {
	if m != nil && m.DedicatedStorageNetworkState != nil {
		return *m.DedicatedStorageNetworkState
	}
	return EntityDTO_ComputeTierData_NOT_SUPPORTED
}

func (m *EntityProfileDTO_VMProfileDTO) GetLicense() []*EntityProfileDTO_LicenseMapEntry {
	if m != nil {
		return m.License
	}
	return nil
}

func (m *EntityProfileDTO_VMProfileDTO) GetClonedUuid() string {
	if m != nil && m.ClonedUuid != nil {
		return *m.ClonedUuid
	}
	return ""
}

func (m *EntityProfileDTO_VMProfileDTO) GetVmTier() EntityProfileDTO_VMProfileDTO_VMTier {
	if m != nil && m.VmTier != nil {
		return *m.VmTier
	}
	return EntityProfileDTO_VMProfileDTO_BASIC
}

func (m *EntityProfileDTO_VMProfileDTO) GetInstanceDiskType() EntityProfileDTO_VMProfileDTO_InstanceDiskType {
	if m != nil && m.InstanceDiskType != nil {
		return *m.InstanceDiskType
	}
	return EntityProfileDTO_VMProfileDTO_NONE
}

func (m *EntityProfileDTO_VMProfileDTO) GetInstanceDiskSize() int32 {
	if m != nil && m.InstanceDiskSize != nil {
		return *m.InstanceDiskSize
	}
	return 0
}

func (m *EntityProfileDTO_VMProfileDTO) GetSupportEncryptedVolume() bool {
	if m != nil && m.SupportEncryptedVolume != nil {
		return *m.SupportEncryptedVolume
	}
	return false
}

func (m *EntityProfileDTO_VMProfileDTO) GetTemplateFamilyCommodityKey() string {
	if m != nil && m.TemplateFamilyCommodityKey != nil {
		return *m.TemplateFamilyCommodityKey
	}
	return ""
}

func (m *EntityProfileDTO_VMProfileDTO) GetNumCloudComputeUnit() int32 {
	if m != nil && m.NumCloudComputeUnit != nil {
		return *m.NumCloudComputeUnit
	}
	return 0
}

// Specific data related to a pm profile
type EntityProfileDTO_PMProfileDTO struct {
	// At least one of numCores and cpuCoreSpeed should be specified
	// The other can be derived from the cpu capacity in
	// the commodity dto.
	NumCores             *int32   `protobuf:"varint,1,opt,name=numCores" json:"numCores,omitempty"`
	CpuCoreSpeed         *float32 `protobuf:"fixed32,2,opt,name=cpuCoreSpeed" json:"cpuCoreSpeed,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EntityProfileDTO_PMProfileDTO) Reset()         { *m = EntityProfileDTO_PMProfileDTO{} }
func (m *EntityProfileDTO_PMProfileDTO) String() string { return proto.CompactTextString(m) }
func (*EntityProfileDTO_PMProfileDTO) ProtoMessage()    {}
func (*EntityProfileDTO_PMProfileDTO) Descriptor() ([]byte, []int) {
	return fileDescriptor_9c3ac0a62ca7565a, []int{0, 2}
}

func (m *EntityProfileDTO_PMProfileDTO) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EntityProfileDTO_PMProfileDTO.Unmarshal(m, b)
}
func (m *EntityProfileDTO_PMProfileDTO) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EntityProfileDTO_PMProfileDTO.Marshal(b, m, deterministic)
}
func (m *EntityProfileDTO_PMProfileDTO) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EntityProfileDTO_PMProfileDTO.Merge(m, src)
}
func (m *EntityProfileDTO_PMProfileDTO) XXX_Size() int {
	return xxx_messageInfo_EntityProfileDTO_PMProfileDTO.Size(m)
}
func (m *EntityProfileDTO_PMProfileDTO) XXX_DiscardUnknown() {
	xxx_messageInfo_EntityProfileDTO_PMProfileDTO.DiscardUnknown(m)
}

var xxx_messageInfo_EntityProfileDTO_PMProfileDTO proto.InternalMessageInfo

func (m *EntityProfileDTO_PMProfileDTO) GetNumCores() int32 {
	if m != nil && m.NumCores != nil {
		return *m.NumCores
	}
	return 0
}

func (m *EntityProfileDTO_PMProfileDTO) GetCpuCoreSpeed() float32 {
	if m != nil && m.CpuCoreSpeed != nil {
		return *m.CpuCoreSpeed
	}
	return 0
}

// Specific data related to a db profile or db instance profile
// Only used by vendors: AWS and Azure
type EntityProfileDTO_DBProfileDTO struct {
	// regions where profile instance is available
	Region []string `protobuf:"bytes,1,rep,name=region" json:"region,omitempty"`
	// database code, only used by AWS
	DbCode *int32 `protobuf:"varint,2,opt,name=dbCode" json:"dbCode,omitempty"`
	// all database editions supported by profile
	DbEdition []string `protobuf:"bytes,3,rep,name=dbEdition" json:"dbEdition,omitempty"`
	// all database engines supported by profile
	DbEngine []string `protobuf:"bytes,4,rep,name=dbEngine" json:"dbEngine,omitempty"`
	// all deployment options supported by profile
	DeploymentOption []string `protobuf:"bytes,5,rep,name=deploymentOption" json:"deploymentOption,omitempty"`
	// number of VCPUs
	NumVCPUs *int32 `protobuf:"varint,6,opt,name=numVCPUs" json:"numVCPUs,omitempty"`
	// all the license (operating system or DB engine) supported by profile
	License []*EntityProfileDTO_LicenseMapEntry `protobuf:"bytes,7,rep,name=license" json:"license,omitempty"`
	// An identifier for matching profiles that belong to the same family.
	Family               *string  `protobuf:"bytes,8,opt,name=family" json:"family,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EntityProfileDTO_DBProfileDTO) Reset()         { *m = EntityProfileDTO_DBProfileDTO{} }
func (m *EntityProfileDTO_DBProfileDTO) String() string { return proto.CompactTextString(m) }
func (*EntityProfileDTO_DBProfileDTO) ProtoMessage()    {}
func (*EntityProfileDTO_DBProfileDTO) Descriptor() ([]byte, []int) {
	return fileDescriptor_9c3ac0a62ca7565a, []int{0, 3}
}

func (m *EntityProfileDTO_DBProfileDTO) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EntityProfileDTO_DBProfileDTO.Unmarshal(m, b)
}
func (m *EntityProfileDTO_DBProfileDTO) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EntityProfileDTO_DBProfileDTO.Marshal(b, m, deterministic)
}
func (m *EntityProfileDTO_DBProfileDTO) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EntityProfileDTO_DBProfileDTO.Merge(m, src)
}
func (m *EntityProfileDTO_DBProfileDTO) XXX_Size() int {
	return xxx_messageInfo_EntityProfileDTO_DBProfileDTO.Size(m)
}
func (m *EntityProfileDTO_DBProfileDTO) XXX_DiscardUnknown() {
	xxx_messageInfo_EntityProfileDTO_DBProfileDTO.DiscardUnknown(m)
}

var xxx_messageInfo_EntityProfileDTO_DBProfileDTO proto.InternalMessageInfo

func (m *EntityProfileDTO_DBProfileDTO) GetRegion() []string {
	if m != nil {
		return m.Region
	}
	return nil
}

func (m *EntityProfileDTO_DBProfileDTO) GetDbCode() int32 {
	if m != nil && m.DbCode != nil {
		return *m.DbCode
	}
	return 0
}

func (m *EntityProfileDTO_DBProfileDTO) GetDbEdition() []string {
	if m != nil {
		return m.DbEdition
	}
	return nil
}

func (m *EntityProfileDTO_DBProfileDTO) GetDbEngine() []string {
	if m != nil {
		return m.DbEngine
	}
	return nil
}

func (m *EntityProfileDTO_DBProfileDTO) GetDeploymentOption() []string {
	if m != nil {
		return m.DeploymentOption
	}
	return nil
}

func (m *EntityProfileDTO_DBProfileDTO) GetNumVCPUs() int32 {
	if m != nil && m.NumVCPUs != nil {
		return *m.NumVCPUs
	}
	return 0
}

func (m *EntityProfileDTO_DBProfileDTO) GetLicense() []*EntityProfileDTO_LicenseMapEntry {
	if m != nil {
		return m.License
	}
	return nil
}

func (m *EntityProfileDTO_DBProfileDTO) GetFamily() string {
	if m != nil && m.Family != nil {
		return *m.Family
	}
	return ""
}

// Data related to a commodity profile used in an entity profile
// Note typically only a subset of these fields may be specified in a profile for
// each commmodity.
type CommodityProfileDTO struct {
	// The type of commodity such as MEM, CPU, STORAGE
	CommodityType *CommodityDTO_CommodityType `protobuf:"varint,1,req,name=commodityType,enum=common_dto.CommodityDTO_CommodityType" json:"commodityType,omitempty"`
	// The capacity of the commodity
	Capacity *float32 `protobuf:"fixed32,2,opt,name=capacity" json:"capacity,omitempty"`
	// Consumed factor may be used to calculate consumed based on capacity
	ConsumedFactor *float32 `protobuf:"fixed32,3,opt,name=consumedFactor" json:"consumedFactor,omitempty"`
	// Consumed value to be used in the profile
	Consumed *float32 `protobuf:"fixed32,4,opt,name=consumed" json:"consumed,omitempty"`
	// A reservation related to this commodity
	Reservation *float32 `protobuf:"fixed32,5,opt,name=reservation" json:"reservation,omitempty"`
	// Overhead related to this commodity - for example overheadMem
	Overhead             *float32 `protobuf:"fixed32,6,opt,name=overhead" json:"overhead,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CommodityProfileDTO) Reset()         { *m = CommodityProfileDTO{} }
func (m *CommodityProfileDTO) String() string { return proto.CompactTextString(m) }
func (*CommodityProfileDTO) ProtoMessage()    {}
func (*CommodityProfileDTO) Descriptor() ([]byte, []int) {
	return fileDescriptor_9c3ac0a62ca7565a, []int{1}
}

func (m *CommodityProfileDTO) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CommodityProfileDTO.Unmarshal(m, b)
}
func (m *CommodityProfileDTO) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CommodityProfileDTO.Marshal(b, m, deterministic)
}
func (m *CommodityProfileDTO) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CommodityProfileDTO.Merge(m, src)
}
func (m *CommodityProfileDTO) XXX_Size() int {
	return xxx_messageInfo_CommodityProfileDTO.Size(m)
}
func (m *CommodityProfileDTO) XXX_DiscardUnknown() {
	xxx_messageInfo_CommodityProfileDTO.DiscardUnknown(m)
}

var xxx_messageInfo_CommodityProfileDTO proto.InternalMessageInfo

func (m *CommodityProfileDTO) GetCommodityType() CommodityDTO_CommodityType {
	if m != nil && m.CommodityType != nil {
		return *m.CommodityType
	}
	return CommodityDTO_CLUSTER
}

func (m *CommodityProfileDTO) GetCapacity() float32 {
	if m != nil && m.Capacity != nil {
		return *m.Capacity
	}
	return 0
}

func (m *CommodityProfileDTO) GetConsumedFactor() float32 {
	if m != nil && m.ConsumedFactor != nil {
		return *m.ConsumedFactor
	}
	return 0
}

func (m *CommodityProfileDTO) GetConsumed() float32 {
	if m != nil && m.Consumed != nil {
		return *m.Consumed
	}
	return 0
}

func (m *CommodityProfileDTO) GetReservation() float32 {
	if m != nil && m.Reservation != nil {
		return *m.Reservation
	}
	return 0
}

func (m *CommodityProfileDTO) GetOverhead() float32 {
	if m != nil && m.Overhead != nil {
		return *m.Overhead
	}
	return 0
}

// This represents a deployment profile (service catalog item) which is related
// to a service entity profile (template)
// This DTO ties image information with scope and a profile to allow for
// the deployment of an entity related to a profile
type DeploymentProfileDTO struct {
	// id related to this.  This may be an id from the system where this was discovered
	// it must be unique in VMTurbo
	Id *string `protobuf:"bytes,1,req,name=id" json:"id,omitempty"`
	// Display name for the deployment profile
	ProfileName *string `protobuf:"bytes,2,opt,name=profileName" json:"profileName,omitempty"`
	// Context data needed to actually invoke deploy - such as URIs
	ContextData []*ContextData `protobuf:"bytes,3,rep,name=contextData" json:"contextData,omitempty"`
	// related service entity profiles (templates)
	RelatedEntityProfileId []string `protobuf:"bytes,4,rep,name=relatedEntityProfileId" json:"relatedEntityProfileId,omitempty"`
	// scopes in which this can be used for example cluster, network
	RelatedScopeId []string `protobuf:"bytes,5,rep,name=relatedScopeId" json:"relatedScopeId,omitempty"`
	// accessible scopes in which this can be used for example clusters
	// this id allows for a set of clusters, where the relatedScopeId would typically
	// only allow for 1 cluster or data center.  This is treated as an OR of scopes
	AccessibleScopeId []string `protobuf:"bytes,6,rep,name=accessibleScopeId" json:"accessibleScopeId,omitempty"`
	// Whether the profile is being created/updated or removed
	UpdateType           *UpdateType `protobuf:"varint,7,opt,name=updateType,enum=common_dto.UpdateType,def=0" json:"updateType,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *DeploymentProfileDTO) Reset()         { *m = DeploymentProfileDTO{} }
func (m *DeploymentProfileDTO) String() string { return proto.CompactTextString(m) }
func (*DeploymentProfileDTO) ProtoMessage()    {}
func (*DeploymentProfileDTO) Descriptor() ([]byte, []int) {
	return fileDescriptor_9c3ac0a62ca7565a, []int{2}
}

func (m *DeploymentProfileDTO) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeploymentProfileDTO.Unmarshal(m, b)
}
func (m *DeploymentProfileDTO) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeploymentProfileDTO.Marshal(b, m, deterministic)
}
func (m *DeploymentProfileDTO) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeploymentProfileDTO.Merge(m, src)
}
func (m *DeploymentProfileDTO) XXX_Size() int {
	return xxx_messageInfo_DeploymentProfileDTO.Size(m)
}
func (m *DeploymentProfileDTO) XXX_DiscardUnknown() {
	xxx_messageInfo_DeploymentProfileDTO.DiscardUnknown(m)
}

var xxx_messageInfo_DeploymentProfileDTO proto.InternalMessageInfo

const Default_DeploymentProfileDTO_UpdateType UpdateType = UpdateType_UPDATED

func (m *DeploymentProfileDTO) GetId() string {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return ""
}

func (m *DeploymentProfileDTO) GetProfileName() string {
	if m != nil && m.ProfileName != nil {
		return *m.ProfileName
	}
	return ""
}

func (m *DeploymentProfileDTO) GetContextData() []*ContextData {
	if m != nil {
		return m.ContextData
	}
	return nil
}

func (m *DeploymentProfileDTO) GetRelatedEntityProfileId() []string {
	if m != nil {
		return m.RelatedEntityProfileId
	}
	return nil
}

func (m *DeploymentProfileDTO) GetRelatedScopeId() []string {
	if m != nil {
		return m.RelatedScopeId
	}
	return nil
}

func (m *DeploymentProfileDTO) GetAccessibleScopeId() []string {
	if m != nil {
		return m.AccessibleScopeId
	}
	return nil
}

func (m *DeploymentProfileDTO) GetUpdateType() UpdateType {
	if m != nil && m.UpdateType != nil {
		return *m.UpdateType
	}
	return Default_DeploymentProfileDTO_UpdateType
}

func init() {
	proto.RegisterEnum("common_dto.EntityProfileDTO_VMProfileDTO_VMTier", EntityProfileDTO_VMProfileDTO_VMTier_name, EntityProfileDTO_VMProfileDTO_VMTier_value)
	proto.RegisterEnum("common_dto.EntityProfileDTO_VMProfileDTO_InstanceDiskType", EntityProfileDTO_VMProfileDTO_InstanceDiskType_name, EntityProfileDTO_VMProfileDTO_InstanceDiskType_value)
	proto.RegisterType((*EntityProfileDTO)(nil), "common_dto.EntityProfileDTO")
	proto.RegisterType((*EntityProfileDTO_LicenseMapEntry)(nil), "common_dto.EntityProfileDTO.LicenseMapEntry")
	proto.RegisterType((*EntityProfileDTO_VMProfileDTO)(nil), "common_dto.EntityProfileDTO.VMProfileDTO")
	proto.RegisterType((*EntityProfileDTO_PMProfileDTO)(nil), "common_dto.EntityProfileDTO.PMProfileDTO")
	proto.RegisterType((*EntityProfileDTO_DBProfileDTO)(nil), "common_dto.EntityProfileDTO.DBProfileDTO")
	proto.RegisterType((*CommodityProfileDTO)(nil), "common_dto.CommodityProfileDTO")
	proto.RegisterType((*DeploymentProfileDTO)(nil), "common_dto.DeploymentProfileDTO")
}

func init() { proto.RegisterFile("ProfileDTO.proto", fileDescriptor_9c3ac0a62ca7565a) }

var fileDescriptor_9c3ac0a62ca7565a = []byte{
	// 1155 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x56, 0xdd, 0x8e, 0xda, 0x46,
	0x14, 0x2e, 0x66, 0xf9, 0x3b, 0x10, 0x96, 0x4c, 0xa2, 0xad, 0x85, 0xa2, 0x86, 0xae, 0xaa, 0x88,
	0x56, 0x29, 0x8a, 0xb8, 0xa8, 0xd4, 0x5c, 0xb4, 0xdd, 0xc5, 0x44, 0x89, 0x92, 0x05, 0x34, 0xc0,
	0x5e, 0xe4, 0x26, 0x32, 0x9e, 0x43, 0x32, 0x8a, 0xed, 0xb1, 0xec, 0x31, 0x2d, 0xb9, 0xeb, 0x4d,
	0x9f, 0xa3, 0x4f, 0xd1, 0xc7, 0xe8, 0x45, 0x9f, 0xa8, 0x9a, 0xb1, 0xc1, 0xe6, 0x27, 0x68, 0xab,
	0xde, 0xf9, 0xfc, 0x7d, 0x33, 0x73, 0x7e, 0x3e, 0x1f, 0x68, 0x4d, 0x42, 0xb1, 0xe4, 0x2e, 0x5a,
	0xb3, 0x71, 0x2f, 0x08, 0x85, 0x14, 0x04, 0x1c, 0xe1, 0x79, 0xc2, 0x7f, 0xc7, 0xa4, 0x68, 0x9f,
	0x0f, 0xf4, 0xf7, 0xd6, 0x78, 0xf9, 0xd7, 0x7d, 0x68, 0x0d, 0x7d, 0xc9, 0xe5, 0x3a, 0x8b, 0x23,
	0x4d, 0x30, 0x38, 0x33, 0x0b, 0x1d, 0xa3, 0x5b, 0xa3, 0x06, 0x67, 0xa4, 0x03, 0x75, 0xc6, 0xa3,
	0xc0, 0xb5, 0xd7, 0x23, 0xdb, 0x43, 0xd3, 0xe8, 0x14, 0xba, 0x35, 0x9a, 0x57, 0x91, 0x5f, 0x00,
	0x50, 0xa3, 0xcc, 0xd6, 0x01, 0x9a, 0xc5, 0x8e, 0xd1, 0x6d, 0xf6, 0x3b, 0xbd, 0xec, 0xe0, 0x5e,
	0x72, 0x86, 0x3a, 0x77, 0xb8, 0xf5, 0xa3, 0xb9, 0x18, 0xf2, 0x1a, 0x5a, 0xda, 0x9d, 0x65, 0x57,
	0x31, 0xcf, 0x3a, 0xc5, 0x6e, 0xbd, 0xff, 0x38, 0x8f, 0x33, 0xd8, 0xf3, 0xb1, 0x66, 0x63, 0x7a,
	0x10, 0x48, 0x1e, 0x42, 0xc9, 0x13, 0x0c, 0x5d, 0xb3, 0xa4, 0xaf, 0x9a, 0x08, 0xe4, 0x02, 0xca,
	0x2b, 0xf4, 0x99, 0x08, 0xcd, 0xb2, 0x56, 0xa7, 0x92, 0x7e, 0x1e, 0x46, 0x4e, 0xc8, 0x03, 0xc9,
	0x85, 0x6f, 0x56, 0xd2, 0xe7, 0x65, 0x2a, 0x32, 0x86, 0xc6, 0xca, 0xcb, 0x4e, 0x34, 0xab, 0x9d,
	0x42, 0xb7, 0xde, 0xff, 0xf6, 0xf0, 0x81, 0xb9, 0xe4, 0xdf, 0xde, 0x64, 0xc2, 0xcb, 0x2f, 0xe8,
	0x0e, 0x80, 0x02, 0x0c, 0xf2, 0x80, 0xb5, 0x3b, 0x00, 0x4e, 0xf6, 0x00, 0x83, 0x3d, 0x40, 0xb6,
	0xc8, 0x01, 0xde, 0xbb, 0x03, 0xa0, 0x75, 0xbd, 0x0b, 0x98, 0x07, 0x20, 0x7d, 0x78, 0x88, 0xbe,
	0xbd, 0x70, 0x71, 0x12, 0x8a, 0x15, 0x8f, 0xb8, 0xf0, 0x6f, 0x6c, 0xe9, 0x7c, 0x30, 0xa1, 0x53,
	0xe8, 0x56, 0xe9, 0x51, 0x1b, 0x79, 0x0a, 0xf7, 0x13, 0x3d, 0xc5, 0x88, 0x7f, 0xc2, 0x24, 0xa0,
	0xae, 0x03, 0x0e, 0x0d, 0x64, 0x02, 0x2d, 0xdc, 0x5c, 0x29, 0xc0, 0x50, 0x72, 0x8c, 0xcc, 0x86,
	0xae, 0xf8, 0x37, 0xa7, 0x3a, 0x27, 0xf5, 0x5e, 0xd3, 0x83, 0x68, 0xf2, 0x33, 0x40, 0x1c, 0x30,
	0x5b, 0xa2, 0xee, 0xc2, 0x66, 0xa7, 0xd0, 0x6d, 0xf6, 0x2f, 0xf2, 0x58, 0xf3, 0xad, 0xf5, 0x79,
	0x65, 0x3e, 0xb1, 0xae, 0x66, 0x43, 0x8b, 0xe6, 0x42, 0xda, 0xaf, 0xe1, 0xfc, 0x0d, 0x77, 0xd0,
	0x8f, 0xf0, 0xc6, 0x0e, 0x86, 0xbe, 0x0c, 0xd7, 0xaa, 0x69, 0x42, 0x7c, 0xaf, 0xfa, 0x22, 0x99,
	0x87, 0x54, 0x52, 0x4d, 0xe3, 0x26, 0xae, 0xe9, 0x4c, 0x14, 0x55, 0xd3, 0xe4, 0x54, 0xed, 0xbf,
	0x2b, 0xd0, 0xc8, 0x37, 0x01, 0x69, 0x43, 0xd5, 0x8f, 0xbd, 0xdb, 0xc1, 0x64, 0x1e, 0x99, 0x85,
	0x4e, 0xa1, 0x5b, 0xa2, 0x5b, 0x99, 0x3c, 0x82, 0xda, 0x6a, 0x30, 0x99, 0x4f, 0x03, 0x44, 0xa6,
	0x07, 0xcc, 0xa0, 0x99, 0x82, 0xf4, 0x80, 0xf8, 0xb1, 0x37, 0x95, 0x22, 0xb4, 0xdf, 0xe3, 0x40,
	0xf8, 0x51, 0xec, 0x21, 0x33, 0x8b, 0x1a, 0xe3, 0x88, 0x45, 0x9d, 0xc4, 0x78, 0xf4, 0x51, 0xa7,
	0xe1, 0x4c, 0xb7, 0xf3, 0x56, 0x56, 0x0f, 0x5a, 0xda, 0x1e, 0x77, 0xd7, 0xe9, 0x70, 0xa4, 0x12,
	0xe9, 0xc2, 0xb9, 0x1f, 0x7b, 0x0b, 0x0c, 0xc7, 0xcb, 0x81, 0x88, 0x03, 0xe1, 0x47, 0x7a, 0x4c,
	0x4a, 0x74, 0x5f, 0x4d, 0xfe, 0x28, 0xc0, 0x23, 0x86, 0x8c, 0x3b, 0xb6, 0x44, 0x96, 0x1e, 0x3d,
	0x42, 0xf9, 0xab, 0x08, 0x3f, 0x4e, 0xa5, 0x2d, 0x51, 0x4f, 0x50, 0xb3, 0x7f, 0x7d, 0xbc, 0x8a,
	0x03, 0xe1, 0x05, 0xb1, 0xc4, 0x19, 0xc7, 0xd0, 0xb2, 0xa5, 0xdd, 0xb3, 0x4e, 0x20, 0xd1, 0x93,
	0xe7, 0x90, 0x17, 0x50, 0x49, 0x13, 0x6e, 0x56, 0x75, 0xe3, 0x3c, 0x3d, 0xd9, 0xef, 0x7b, 0xa5,
	0xa5, 0x9b, 0x60, 0xf2, 0x15, 0x80, 0xe3, 0x0a, 0x1f, 0xd9, 0x3c, 0xe6, 0x4c, 0xcf, 0x62, 0x8d,
	0xe6, 0x34, 0xe4, 0x25, 0x94, 0x57, 0x9e, 0xba, 0xb0, 0xee, 0xfe, 0x66, 0xff, 0xd9, 0x9d, 0x07,
	0xbf, 0x77, 0x7b, 0xa3, 0xe2, 0x68, 0x1a, 0x4f, 0x96, 0xd0, 0xe2, 0x7e, 0x24, 0x6d, 0xdf, 0x41,
	0x6b, 0x53, 0xa0, 0xba, 0xc6, 0x7c, 0x7e, 0x77, 0xcc, 0x57, 0x7b, 0x08, 0xf4, 0x00, 0x93, 0x7c,
	0xb7, 0x7b, 0xce, 0x94, 0x7f, 0x42, 0xb3, 0xa1, 0xab, 0x79, 0xa0, 0x27, 0x3f, 0xc0, 0x45, 0x14,
	0x07, 0x81, 0x08, 0xe5, 0xd0, 0x77, 0xc2, 0x75, 0x20, 0x91, 0xdd, 0x0a, 0x37, 0xf6, 0x50, 0x93,
	0x48, 0x95, 0x7e, 0xc6, 0x4a, 0x7e, 0x82, 0xb6, 0x44, 0x2f, 0x70, 0x6d, 0x89, 0x2f, 0x74, 0x0b,
	0x6d, 0xb9, 0xf9, 0x35, 0xae, 0xf5, 0xf4, 0xd5, 0xe8, 0x09, 0x0f, 0xf2, 0x0c, 0x1e, 0xf8, 0xb1,
	0x37, 0x70, 0x45, 0xcc, 0xd2, 0x9e, 0x98, 0xfb, 0x5c, 0x9a, 0xe7, 0xfa, 0x9a, 0xc7, 0x4c, 0x97,
	0x5f, 0x43, 0x39, 0xc9, 0x27, 0xa9, 0x41, 0xe9, 0xfa, 0x6a, 0xfa, 0x6a, 0xd0, 0x2a, 0x90, 0x06,
	0x54, 0xa7, 0xb3, 0xab, 0x91, 0x75, 0x45, 0xad, 0x96, 0x71, 0xf9, 0x16, 0x5a, 0xfb, 0xe9, 0x21,
	0x55, 0x38, 0x1b, 0x8d, 0x47, 0xc3, 0x56, 0x81, 0x54, 0xa0, 0xf8, 0xd2, 0xb2, 0x5a, 0x86, 0xfa,
	0x98, 0x4e, 0xad, 0x56, 0x51, 0x45, 0x8f, 0x6e, 0x6f, 0x86, 0xef, 0x94, 0x74, 0x46, 0xee, 0x41,
	0xed, 0xea, 0xed, 0x9c, 0x0e, 0xdf, 0x29, 0x2f, 0xc8, 0x44, 0x65, 0xad, 0xb7, 0x47, 0xd0, 0x98,
	0x1c, 0xce, 0xf3, 0x40, 0x84, 0x98, 0x9f, 0x67, 0x2d, 0x93, 0x4b, 0x68, 0x38, 0x41, 0xac, 0xbe,
	0xf3, 0x23, 0xbd, 0xa3, 0x6b, 0xff, 0x69, 0x40, 0x23, 0xcf, 0xc1, 0x3b, 0x5c, 0x53, 0xcc, 0x71,
	0xcd, 0x05, 0x94, 0xd9, 0x62, 0x20, 0x58, 0xf2, 0xeb, 0x2d, 0xd1, 0x54, 0x52, 0xa4, 0xc1, 0x16,
	0x43, 0xc6, 0xf5, 0x6f, 0xab, 0xa8, 0x43, 0x32, 0x85, 0x26, 0x81, 0xc5, 0xd0, 0x7f, 0xcf, 0xfd,
	0xe4, 0x4f, 0xaa, 0x48, 0x20, 0x95, 0x55, 0x7f, 0x30, 0x0c, 0x5c, 0xb1, 0xf6, 0xd0, 0x97, 0xe3,
	0xe4, 0xbf, 0x57, 0xd2, 0x3e, 0x07, 0xfa, 0x1d, 0xda, 0x2a, 0xef, 0xd1, 0x56, 0x6e, 0x02, 0x2b,
	0xff, 0x67, 0x02, 0x33, 0x52, 0xaa, 0xe6, 0x49, 0xe9, 0xda, 0x84, 0x8b, 0x6c, 0x5f, 0x98, 0x06,
	0xe8, 0xf0, 0x25, 0x77, 0x14, 0x6d, 0x5c, 0xfe, 0x6e, 0xc0, 0x83, 0x23, 0xcb, 0x00, 0x79, 0x03,
	0xf7, 0xb6, 0xeb, 0x80, 0x1e, 0xaf, 0x82, 0x5e, 0x46, 0x9e, 0x1c, 0x5d, 0x22, 0x52, 0x3e, 0xca,
	0xbc, 0xe9, 0x6e, 0xb0, 0x7a, 0xbb, 0x63, 0x07, 0xb6, 0xc3, 0xe5, 0x3a, 0x2d, 0xe1, 0x56, 0x26,
	0x4f, 0xa0, 0xe9, 0xa4, 0x84, 0xfb, 0xc2, 0x76, 0xa4, 0x08, 0x35, 0x21, 0x1b, 0x74, 0x4f, 0xab,
	0x31, 0x36, 0x94, 0x7d, 0x96, 0x62, 0x6c, 0x88, 0xba, 0x03, 0xf5, 0x10, 0x23, 0x0c, 0x57, 0x76,
	0x5a, 0x02, 0x65, 0xce, 0xab, 0x54, 0xb4, 0x58, 0x61, 0xf8, 0x01, 0x6d, 0xa6, 0xb3, 0x6f, 0xd0,
	0xad, 0x7c, 0xf9, 0x8f, 0x01, 0x0f, 0xad, 0x6d, 0xb9, 0x4e, 0x2f, 0x70, 0x41, 0x62, 0xcd, 0x2f,
	0x70, 0x39, 0x15, 0xf9, 0x11, 0xea, 0x8e, 0xf0, 0x25, 0xfe, 0x26, 0x55, 0x76, 0x75, 0x33, 0xd5,
	0xfb, 0x5f, 0xee, 0x26, 0x6d, 0x6b, 0xa6, 0x79, 0x5f, 0xc5, 0x1f, 0x21, 0xaa, 0x19, 0x67, 0x3b,
	0xf5, 0x7e, 0xc5, 0xd2, 0xae, 0xfb, 0x8c, 0x55, 0xe5, 0x2f, 0xb5, 0x4c, 0x1d, 0x11, 0x28, 0xff,
	0xa4, 0x03, 0xf7, 0xb4, 0x6a, 0xab, 0xb0, 0x1d, 0x07, 0xa3, 0x88, 0x2f, 0x5c, 0xdc, 0xb8, 0x96,
	0xb5, 0xeb, 0xa1, 0x61, 0x6f, 0x07, 0xa8, 0xfc, 0xe7, 0x1d, 0xe0, 0xfa, 0x7b, 0x78, 0xec, 0x08,
	0xaf, 0xb7, 0xf2, 0x64, 0x1c, 0x2e, 0x44, 0x4f, 0xb1, 0xd7, 0x52, 0x84, 0x5e, 0x0a, 0xd1, 0x63,
	0x52, 0x5c, 0x43, 0x96, 0xea, 0x7f, 0x03, 0x00, 0x00, 0xff, 0xff, 0x92, 0x44, 0x75, 0x91, 0x70,
	0x0b, 0x00, 0x00,
}
